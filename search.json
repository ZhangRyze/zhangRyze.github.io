[{"title":"Hexo 博客集成评论/阅读量统计/站内搜索","url":"%2F2018%2F03%2F21%2FcreateBlogExperience-3%2F","content":"完整的博客系统是需要评论系统、统计系统、站内搜索的（PS：自我感觉应该的），所以在折腾完博客以后花了点时间研究了下评论系统和统计系统。\n\n---\n### 站内评论\n##### Valine\n查了一堆资料，发现目前博客站点使用的评论功能，多说、网易云跟贴、友言都已经下线。Disqus也被挡在墙外。\n\n可用的评论系统大概知道几个：\n\n* [HyperComments](https://www.hypercomments.com) - 貌似来自俄罗斯的评论系统，看了一会搞不懂，语言能力太次（PASS）。\n* [来必力](https://livere.com) - 韩国的。\n* [畅言](http://changyan.kuaizhan.com) - 需要备案，需要域名，我没有（PASS）。\n* [Valine](https://github.com/xCss/Valine) / [Valine中文教程](https://valine.js.org) - 基于 `Leancloud` 数据管理的简约风格系统，好，就它了，正好我后面的统计系统用的也是 `Leancloud`。\n\n##### 引用\n需要在你的博客系统引用两个 `javaScript`:\n\n```javascript\n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n```\n##### 获取 AppId 和 AppKey\n请先 [登录](https://leancloud.cn/dashboard/login.html#/signin) 或 [注册](https://leancloud.cn/dashboard/login.html#/signup) `Leancloud` ，进入控制台后点击左下角 `创建应用`：\n![创建应用](createBlogExperience-3/step_1.jpg)\n应用创建好以后，进入刚刚创建的应用，选择左下角的 `设置` > `应用Key`，然后就能看到你的 `appid` 和 `appkey` 了：\n![appid和appkey](createBlogExperience-3/step_2.jpg)\n> 为了您的数据安全，请注意设置自己的 `安全域名`：\n\n![安全域名](createBlogExperience-3/step_3.jpg)\n##### 配置\n在 `theme` 中的 `_config.yml` 添加：\n\n```bash\n# LeanCloud支持\nLeanCloud:\n  enable: true\n  appid: 你的 appid # your leancloud application appid\n  appkey: 你的 appkey # your leancloud application appkey\n\n# valine支持\nvaline:\n  enable: true # 如果使用valine，请设置改之为true\n  notify: false # 评论回复邮件提醒 , https://github.com/xCss/Valine/wiki\n  verify: false # 验证码服务\n  placeholder: 说点什么吧 # 评论框占位提示符\n  avatar: monsterid # Gravatar 头像展示方式\n  guest_info: nick,mail # 评论者相关属性 nick/mail/link\n  pageSize: 10 # 评论列表分页，每页条数\n```\n然后需要在页面初始化的时候初始化 `valine`，我则是在博客系统中创建了一个 `comments` 的组件，包括上面提到的引用都在这里：\n\n```bash\n<% if (theme.valine.enable){ %>\n    <script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n    <script src=\"//unpkg.com/valine/dist/Valine.min.js\"></script>\n    <div id=\"comment\" class=\"comment\" ></div>\n    <script>\n        var notify = '<%= theme.valine.notify %>' == true ? true : false;\n        var verify = '<%= theme.valine.verify %>' == true ? true : false;\n        var GUEST_INFO = ['nick','mail','link'];\n        var guest_info = '<%= theme.valine.guest_info %>'.split(',').filter(function(item){\n            return GUEST_INFO.indexOf(item) > -1\n        });\n        guest_info = guest_info.length == 0 ? GUEST_INFO :guest_info;\n        window.valine = new Valine({\n            el: '#comment',\n            notify: notify,\n            verify: verify,\n            appId: \"<%= theme.LeanCloud.appid %>\",\n            appKey: \"<%= theme.LeanCloud.appkey %>\",\n            avatar:'<%= theme.valine.avatar %>',\n            placeholder: \"<%= theme.valine.placeholder %>\",\n            guest_info:guest_info,\n            pageSize:'<%= theme.valine.pageSize %>'\n        });\n    </script>\n<% } %>\n```\n然后在需要评论的地方添加这个组件。\n> 我使用的模板引擎是 `ejs`\n\n---\n\n### 站内统计\n之前在网上浏览的时候看到了 `不蒜子` ，是一个非常不错的站内统计插件，而且 [官网](http://service.ibruce.info/) 宣传是 `只需两行代码，搞定计数`。\n\n听起来就很简单，而且它可以在你博客任何地方显示当前访客数和页面浏览量：\n\n```html\n<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script> // 引入插件\n\n<span id=\"busuanzi_container_site_pv\">本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次</span> // html页面中展示\n```\n但是，我的博客之前评论集成的 `Valine` 插件是基于 `LeanCloud`，而 `LeanCloud` 可以自建 `Class` 写入读取，与我来说很是方便，最后还是选择了 `LeanCloud`。\n##### LeanCloud\n`LeanCloud（aka. AVOS Cloud）` 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求，我们只用到它的数据储存部分，由于之前评论系统也是用的 `LeanCloud` ，所以可以两个系统公用一个应用，选择应用中数据选项，选择 `创建Class` ，取名为 `Counter`。\n\n`LeanCloud` 有各种的 `SDK`，我们只需要用到 `javascript` 的 `SDK`，在 `layout.ejs` 中 `body` 最后引入 `SDK` ，然后初始化：\n\n```html\n<!-- 存储服务 -->\n<script src=\"//cdn1.lncld.net/static/js/3.6.1/av-min.js\"></script>\n<script>\n    AV.initialize(\"<%= theme.LeanCloud.appid %>\",\"<%= theme.LeanCloud.appkey %>\");\n</script>\n```\n接下来新建一个 `js` 文件，写入两个方法，一个查询数据一个是写入数据，然后在刚才的 `SDK` 的地方把这个 `js` 引入：\n\n```javascript\n// 请求点击数，显示在页面上\nfunction showHitCount(Counter) {\n\t// 这是给一个页面中有多篇文章时所调用的，例如博客主界面或者存档界面。\n\tvar query = new AV.Query(Counter);\n\tvar entries = [];\n\tvar _visitors = $(\".post-hits\"); // 获取页面中所有文章的阅读数容器\n\n\t_visitors.each(function() {\n\t\tentries.push($(this).data(\"post-path\").trim());\n\t});\n\n\t// 批量查询\n\tquery.containedIn('url', entries);\n\tquery.find()\n\t\t.then(function(results){\n\t\t\tif (results.length === 0) {\n\t\t\t\t_visitors.html('');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < results.length; i++) {\n\t\t\t\tvar item = results[i];\n\t\t\t\tvar url = item.get('url');\n\t\t\t\tvar hits = item.get('hits'); // 获取点击次数\n\t\t\t\tvar element = document.getElementById('post-'+url);\n\t\t\t\t$(element).html('阅读数：' + hits + ' 次')\n\t\t\t}\n\t\t},function(error) {\n\t\t\tconsole.log(\"Error: \" + error.code + \" \" + error.message);\n\t\t})\n}\n\n// 为页面添加点击数\nfunction addCount(Counter) {\n\t// 页面（博客文章）中的信息：leancloud_visitors\n\t// id为page.url， data-flag-title为page.title\n\tvar _visitors = $(\".post-hits\");\n\tvar url = _visitors.data('post-path').trim();\n\tvar title = _visitors.data('post-title').trim();\n\tvar query = new AV.Query(Counter);\n\n\t// 只根据文章的url查询LeanCloud服务器中的数据\n\tquery.equalTo(\"url\", url)\n\tquery.find()\n\t\t.then(function (results) {\n\t\t\tif (results.length > 0) { //说明LeanCloud中已经记录了这篇文章\n\t\t\t\tvar counter = results[0];\n\t\t\t\tcounter.fetchWhenSave(true);\n\t\t\t\tcounter.increment(\"hits\"); // 将点击次数加1\n\t\t\t\tcounter.save(null)\n\t\t\t\t\t.then(function(counter) {\n\t\t\t\t\t\tvar hits = counter.get('hits'); // 获取点击次数\n\t\t\t\t\t\tvar element = document.getElementById('post-'+url);\n\t\t\t\t\t\t$(element).html('阅读数：' + hits + ' 次')\n\t\t\t\t\t},function(error) {\n\t\t\t\t\t\tconsole.log('Failed to save Visitor num, with error message: ' + error.message);\n\t\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// 执行这里，说明LeanCloud中还没有记录此文章\n\t\t\t\tvar newcounter = new Counter();\n\t\t\t\t/* Set ACL */\n\t\t\t\tvar acl = new AV.ACL();\n\t\t\t\tacl.setPublicReadAccess(true);\n\t\t\t\tacl.setPublicWriteAccess(true);\n\t\t\t\tnewcounter.setACL(acl);\n\t\t\t\t/* End Set ACL */\n\t\t\t\tnewcounter.set(\"title\", title); // 把文章标题\n\t\t\t\tnewcounter.set(\"url\", url); // 文章url\n\t\t\t\tnewcounter.set(\"hits\", 1); // 初始点击次数：1次\n\t\t\t\tnewcounter.save(null)\n\t\t\t\t\t.then(function(counter) {\n\t\t\t\t\t\tvar hits = counter.get('hits'); // 获取点击次数\n\t\t\t\t\t\tvar element = document.getElementById('post-'+url);\n\t\t\t\t\t\t$(element).html('阅读数：' + hits + ' 次')\n\t\t\t\t\t},function(error) {\n\t\t\t\t\t\tconsole.log('Failed to save Visitor num, with error message: ' + error.message);\n\t\t\t\t\t})\n\t\t\t}\n\t\t},function(error){\n\t\t\tconsole.log('Error:' + error.code + \" \" + error.message);\n\t\t})\n}\n```\n然后在你想要记录阅读量的地方调用添加的方法 `addCount`，在你想要显示阅读数的地方调用查询方法 `showHitCount`。\n> * 文档结构例如： `<div class=\"post-hits\" id=\"post-<%= url_for(item.path) %>\" data-post-path=\"<%= url_for(item.path) %>\" data-post-title=\"<%= item.title %>\"></div>`；\n> * 这两个方法我用的 `jquery`，需要引入 `jquery`；\n\n---\n### 站内搜索\n静态博客搜索方案一般有两种：\n\n* 第三方搜索服务。\n* 序列化站点内容作为数据源，然后自己写查询方法。\n\n百度经验里就有 [教你用swiftype为Hexo添加站内搜索](https://jingyan.baidu.com/article/9158e0003500a1a254122836.html) 的一个 `swiftype` 的第三方搜索服务。\n\n本站使用的是 `hexo` 的插件 `hexo-generator-search` ：\n\n> 1. 利用插件 `hexo-generator-search` 生成 `json` 文件；\n> 2. 利用 `jquery.ajax` 解析 `json`；\n> 3. 在博客结构中添加对应的搜索容器和搜索框样式；\n\n##### 插件安转\n`cd` 到你的博客目录，然后执行：\n\n```bash\nnpm install hexo-generator-search --save\n```\n> 插件可以生成 `xml` 和 `json` 两种，我感觉 `json` 格式比较好处理，所以采用的是 `json`\n\n##### 解析函数\n```javascript\nvar searchFunc = function(path, search_id, content_id) {\n    'use strict';\n    $.ajax({\n        url: path,\n        dataType: \"json\",\n        success: function( results ) {\n            // get the contents from search data\n            var _input = document.getElementById(search_id);\n            if (!_input) return;\n            var _resultContent = document.getElementById(content_id);\n\n            _input.addEventListener('input', function(){\n                var str='<ul class=\\\"search-result-list\\\">';\n                var keywords = this.value.trim().toLowerCase().split(/[\\s\\-]+/);\n                _resultContent.innerHTML = \"\";\n                if (this.value.trim().length <= 0) {\n                    _resultContent.innerHTML = \"<div class='local-search-prompt'>搜一搜看看吧 ~</div>\";\n                    return;\n                }\n                // perform local searching\n                results.forEach(function(data) {\n                    var isMatch = true;\n                    var content_index = [];\n                    if (!data.title || data.title.trim() === '') {\n                        data.title = \"Untitled\";\n                    }\n                    var data_title = data.title.trim().toLowerCase();\n                    var data_content = data.content.trim().replace(/<[^>]+>/g,\"\").toLowerCase();\n                    var data_url = data.url;\n                    var data_url_decode = decodeURIComponent(data.url).split('/');\n                    var data_date = null;\n                    if(data_url_decode.length == 6){\n                        data_date = data_url_decode[1] + '-' + data_url_decode[2] + '-' + data_url_decode[3];\n                    }\n                    var index_title = -1;\n                    var index_content = -1;\n                    var first_occur = -1;\n                    // only match artiles with not empty contents\n                    if (data_content !== '') {\n                        keywords.forEach(function(keyword, i) {\n                            index_title = data_title.indexOf(keyword);\n                            index_content = data_content.indexOf(keyword);\n                            if( index_title < 0 && index_content < 0 ){\n                                isMatch = false;\n                            } else {\n                                if (index_content < 0) {\n                                    index_content = 0;\n                                }\n                                if (i == 0) {\n                                    first_occur = index_content;\n                                }\n                                // content_index.push({index_content:index_content, keyword_len:keyword_len});\n                            }\n                        });\n                    } else {\n                        isMatch = false;\n                    }\n                    // show search results\n                    if (isMatch) {\n                        str += \"<li>\";\n                        str += \"<a href='/\"+ data_url +\"' class='search-result-item'>\";\n                        str += \"<div>\"+ data_title +\"</div>\";\n                        str += \"<div>\";\n                        str += \"<div>\";\n                        str += \"<div><i class='iconfont ic-category'></i>\"+ data.categories[0] +\"</div>\";\n                        str += \"<div><i class='iconfont ic-tag'></i>\"+ data.tags[0] +\"</div>\";\n                        str += \"</div>\";\n                        str += \"<div>\"+ data_date +\"</div>\";\n                        str += \"</div>\";\n                        str += \"</a></li>\";\n                    }\n                });\n                str += \"</ul>\";\n                _resultContent.innerHTML = str;\n            });\n        }\n    });\n}\n// search\nvar path = '/search.json';\nsearchFunc(path, 'local-search-input', 'local-search-result')\n```\n##### 搜索框结构\n\n```html\n<div id=\"local-search-box\" class=\"local-search-box\" style=\"display: none\">\n    <input class=\"local-search-input\" type=\"text\" id=\"local-search-input\" name=\"q\" results=\"0\" placeholder=\"<%= __('Search') %>\" />\n    <div class=\"local-search-list\" id=\"local-search-result\">\n        <div class=\"local-search-prompt\">搜一搜看看吧 ~</div>\n    </div>\n</div>\n```\n> 搜索框的样式需要自己调试\n\n---\n这三个系统大概阐述了一下，至于怎么整合还要看自己喜好。\n\n\n","tags":["LeanCloud"],"categories":["自个儿折腾"]},{"title":"Hexo 搭建个人博客","url":"%2F2018%2F03%2F20%2FcreateBlogExperience-2%2F","content":"### 写在开始之前\n自从上回折腾完博客 “不了了之” 之后时隔一年第二次折腾，是因为现在想写一些东西但是看着原来的那个主题不太满意在搜索浏览的过程中发现了 `Hexo`，比 `Jeklly` 功能差不多，然后就试着用 `Hexo` 重新搭建了博客。现在来分享一下过程。\n### Hexo\n`Hexo` 是一个快速、简洁且高效的博客框架。同样使用 `Markdown`（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n安装 Hexo 相当简单，只需要用到两个工具：\n\n* [node.js](https://nodejs.org/en/)\n* [Git](https://git-scm.com)\n\n##### 安装 Git\n\n* Windows平台：下载并安装 [Git](https://git-scm.com/download/win)。\n* Mac平台：使用 [Homebrew](http://mxcl.github.com/homebrew/), [MacPorts](http://www.macports.org/)：`brew install git` ；或下载 [安装程序](https://sourceforge.net/projects/git-osx-installer/) 安装。\n\n##### 安装 node.js\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/creationix/nvm)。\ncURL：\n\n```bash\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\nWget:\n\n```bash\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n安装完成后，重启终端并执行下列命令即可安装 `node.js`：\n\n```bash\n$ nvm install stable\n```\n或者您也可以下载 [安装程序](https://nodejs.org) 来安装。\n\n> * 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选 `Add to PATH` 选项。\n> * 另外，您也可以使用 `Git Bash`，这是 `git for windows` 自带的一组程序，提供了 `Linux` 风格的 `shell`，在该环境下，您可以直接用上面提到的命令来安装`Node.js`。打开它的方法很简单，在任意位置单击右键，选择 `Git Bash Here` 即可。由于 `Hexo` 的很多操作都涉及到命令行，您可以考虑始终使用 `Git Bash` 来进行操作。\n##### 安装 Hexo\n所有必备的应用程序安装完成后，就可以使用 `npm` 安装 `Hexo`。\n\n```bash\n$ npm install -g hexo-cli\n```\n### 生成博客结构\n安装 `Hexo` 完成后，请执行下列命令，`Hexo` 将会在指定文件夹中新建所需要的文件。\n\n```bash\n$ hexo init <folder>\n```\n> `folder` 可以是路径\n\n新建完成后，指定文件夹的目录如下：\n\n```bash\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n##### 文件 _config.yml\n网站的 [配置](https://hexo.io/zh-cn/docs/configuration.html) 信息，您可以在此配置大部分的参数，配置的参数都可以在博客布局中访问到。\n##### 文件 package.json\n```JSON package.json\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"\"\n  },\n  \"dependencies\": {\n    \"hexo\": \"^3.0.0\",\n    \"hexo-generator-archive\": \"^0.1.0\",\n    \"hexo-generator-category\": \"^0.1.0\",\n    \"hexo-generator-index\": \"^0.1.0\",\n    \"hexo-generator-tag\": \"^0.1.0\",\n    \"hexo-renderer-ejs\": \"^0.1.0\",\n    \"hexo-renderer-stylus\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.4\",\n    \"hexo-server\": \"^0.1.2\"\n  }\n}\n```\n配置的应用程序信息，[EJS](http://embeddedjs.com)，[Stylus](http://stylus-lang.com) 和 [Markdown](https://daringfireball.net/projects/markdown/) renderer 已默认配置，您可以自由移除，也可以添加您需要的应用到 `dependencies` 中，然后执行下面命令安装：\n\n```bash\n$ cd <folder>\n$ npm install\n```\n##### 文件夹 scaffolds\n模版 的文件夹，当您新建文章时，`Hexo` 会根据 `scaffold` 来建立文件。`Hexo` 的模板是指在新建的 `markdown` 文件中默认填充的内容。例如：\n\n```bash\n$ hexo new 'PostName'\n```\n> 新建 post 的命令，修改`scaffold/post.md` 中的 `Front-matter` 内容，那么每次新建一篇文章时都会包含这个修改。\n\n```bash\n$ hexo new page 'PageName'\n```\n> * 新建 page 的命令，修改`scaffold/page.md` 中的 `Front-matter` 内容，那么每次新建一篇文章时都会包含这个修改。\n> * 新建`scaffold/xxxx.md` 文件，那么每次执行 `$ hexo new xxxx 'PageName'` 新建一篇文章时都会包含这个修改。\n> * Front-matter 是用 `---` 包含的内容，博客渲染完是不显示在界面上，只存在该页面的参数里\n\n##### 文件夹 source\n资源文件夹是存放用户资源的地方，`Markdown(.md)` 和 `HTML` 文件会被解析并放到 `public` 文件夹，而其他文件会被拷贝过去。\n> 除 `_posts` 文件夹之外，开头命名为 `_` (下划线)的文件/文件夹和隐藏的文件将会被忽略。\n\n##### 文件夹 themes\n[主题](https://hexo.io/zh-cn/docs/themes.html) 文件夹。`Hexo` 会根据主题来生成静态页面。会有一个默认的主题文件夹\n`landscape`，`landscape` 的默认语法是 `ejs`。\n\n* 主题的文件夹里也有个 `_config.yml` 文件，通常在配置一些跟主题相关的信息，例如：`menu`（菜单）等，当然在主文件夹的 `_config.yml` 中配置也可以，在这里主要是为了区别主题配置和网站配置。\n\n* 主题文件夹中的 `language` 文件夹可以配置网站的语言，然后在主配置 `_config.yml` 文件中的 `language` 填入您想要显示的 `language` 文件夹中的语言文件名。在布局过程中使用 `__(value)` 方法转换您的关键词。\n> * 语言仅限一些您在布局过程中网站的关键词。\n> * 上述 `value` 是您在语言文件中的 `key` 值，`__(value)` 得到的是它对应的值。\n\n* 主题文件夹中的 `layout` 文件夹是放整个博客的布局的文件夹，用于存放主题的模板文件，决定了网站内容的呈现方式，`Hexo` 内建 `Swig` 模板引擎，您可以另外安装插件来获得 [EJS](https://github.com/hexojs/hexo-renderer-ejs)、[Haml](https://github.com/hexojs/hexo-renderer-haml) 或 [Jade（Pug）](https://github.com/hexojs/hexo-renderer-jade) 支持，`Hexo` 的默认主题 `landscape` 是使用 `Ejs`。`Hexo` 根据模板文件的扩展名来决定所使用的模板引擎，例如：\n```bash\nlayout.ejs   - 使用 EJS\nlayout.swig  - 使用 Swig\n```\n* 主题文件夹中的 `source` 文件夹是资源文件夹，除了模板以外的 `Asset`，例如 `CSS`、`JavaScript` 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 _（下划线线）或隐藏的文件会被忽略。如果文件可以被渲染的话，会经过解析然后储存到 `public` 文件夹，否则会直接拷贝到 `public` 文件夹。\n\n### 最后的准备\n接下来就差不多生成博客上传到 `Github pages` 上了，不过在这之前还得需要配置一下 `Git` 地址：\n\n在主配置文件 `_config.yml` 中，找到 `deploy` 一项，修改成你自己的 `Git` 地址\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/UserName/ProjectName.git\n  branch: master\n```\n> `UserName` 和 `ProjectName` 是前面文章提到的你的 `GitHub` 的用户名和博客项目的项目名。\n\n在上传 `Github` 之前还可以通过命令行在本地预览博客内容：\n\n```bash\nhexo clean\nhexo generate\nhexo server\n```\n> hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server --save。\n\n然后打开浏览器，地址栏输入 `http://localhost:4000` ，就可以看到你自己的博客了。\n\n上传 `Github` 还需要一个插件 `hexo-deployer-git` ：\n\n* 你可以执行命令行 `npm install hexo-deployer-git --save` 安装 `hexo-deployer-git`。\n* 在 `package.json` 中的 `dependencies` 中添加，然后执行 `npm install` 安装 `hexo-deployer-git`。\n\n最后执行命令行：\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n在浏览器中输入 `http://ProjectName.github.io` 就可以看到你的个人博客啦！！！\n\n> 如果之前你第一次使用 `Git` 上传文件，在 `deploy` 的过程中需要输入你的 `UserName` 和 `Passward`\n\n","tags":["node"],"categories":["自个儿折腾"]},{"title":"Jeklly 搭建个人博客","url":"%2F2018%2F03%2F16%2FcreateBlogExperience-1%2F","content":"上篇文章大概讲完了怎么使用 `Github pages`，现在就研究一下怎么使用 `Jeklly`。\n### Jekyll\n之前说过 `GitHub` 提供的主页实际上是基于 `GitHub` 的源代码实现的，所以只支持上传静态的网页，而 [Jekyll](https://github.com/jekyll/jekyll) 是一种模板转化引擎，同时也是 `Github` 上面的一个开源项目，同时它提供了模板、变量、插件等功能，也就是说只要上传符合 `Jekyll` 规范的文件，然后上传到 `Github`，由 `Github` 生成并托管整个网站。\n\n`Jekyll` 是基于 `Ruby` 的，所以搭建 `Jekyll` 之前必须确保 `Ruby` 正常安装，`Jekyll` 的搭建基本都满足如下步骤:\n\n* 安装 `Ruby` (2.0.0以上)；\n* 切换 `Ruby` 的source来源；\n* 通过 `gem` 命令安装 `Jekyll`；\n* `github` 上选择一个心仪的 `Jekyll` 模板，本地 `Jekyll serve` 运行相应的博客；\n\n### Ruby 安装\n##### windows下安装\n可以使用 [Rubyinstaller](https://rubyinstaller.org/downloads/) 安装。（[Ruby安装说明](https://www.ruby-lang.org/zh_cn/downloads/)）\n\n> * windows的安装还是比较无脑的，而我用的是mac装的，就不多说了。\n> * windows类似以下 GBK 报错解决方案，请参考这里的 [解决方法](https://github.com/imathis/octopress/issues/232#issuecomment-2480736)。\n>   * Error reading file F:/github.com/kaiye.github.com/index.html: invalid byte sequence in GBK\n>   * \u001b[31m Liquid Exception: invalid byte sequence in GBK in alpha-layer.html\u001b[0m\nerror: invalid byte sequence in GBK. Use --trace to view backtrace\n\n##### mac下安装\n\n###### 安装 rvm\n\n可以先 `ruby -v ` 查看下本地ruby版本号，如果是 1.9.2 以上的直接跳过该步。由于gem安装 `Jekyll` 需要 `Ruby` 1.9.2以上版本，现在官方推荐的是1.9.3，而 mac 自带的 `Ruby` 为1.8.6，所以需要先升级本地的 `ruby`，否则在安装的时候会出现类似`“instance of Date needs to have method 'marshal_load'”`的报错。\n\n网上不少人使用源码安装来替换本地 `Ruby`，其实用 `rvm` 来管理多版本 `Ruby` 是更安全、方便的方案。`rvm` 的安装比较简单：\n\n```bash\n$ curl -L https://get.rvm.io | bash -s stable\n```\n安装好 `rvm` 后需要按照提示:\n\n```bash\n$ source ~/.bash_profile \n```\n将 `rvm` 添加到环境变量中。\n###### 安装 Ruby\n接下来可以正式安装ruby了，这里可以先通过 rvm use 命令来获取详细的版本号，安装过程可参考以下代码：\n\n```bash\n$ rvm use 1.9.3\nruby-1.9.3-p392 is not installed.\nTo install do: 'rvm install ruby-1.9.3-p392'\n$ rvm install ruby-1.9.3-p392\n```\n大概N分钟之后，ruby 以及 homebrew即可安装完成，且自动切换到最新版ruby。\n\n> * 如果安装失败确认一下你电脑有没有安装 `macports`，由于 `rvm` 会通过 `homebrew` 来安装 `Ruby`，而 `homebrew` 与 `macports` 存在兼容性问题，如果不删除 `macports` 会导致安装失败。删除 `macports` 有一定风险，请先自行 `cd /opt/local` 确认软件均可删除。\n\n```bash\n$ sudo port -f uninstall installed\n$ sudo rm -rf /opt/local ~/.macports\n```\n\n> * `Ruby` 的版本和 `RubyDevKit` 的版本要对应，不要装错；\n> * 目前新版的 `Ruby` 自带 `gem` 了，所以 `gem` 安装可以跳过；\n> * 由于国内的网络，`gem` 推荐使用 [淘宝的镜像](https://ruby.taobao.org) 比较靠谱；\n\n```bash\n$ gem sources -l\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a http://ruby.taobao.org/  \n```\n> * 修改来源后可以通过 `gem sources -l` 查看是否正确修改\n\n### 安装 Jeklly\n安装jekyll前先按照依赖包bundler，下述命令即可安装\n\n```bash\ngem install bundler\n```\n之后，直接可以通过下述命令安装jekyll\n\n```bash\ngem install jekyll\n```\n安装需要一定的时间，过一段时间正常安装后即代表jekyll可以开始使用了\n### 测试/运行 Jekyll 博客\n安装好之后就可以测试我们的环境了。用命令行进入到上一节我们创建的目录，执行下面命令：\n\n```bash\n$ jekyll serve --safe --watch\n```\n`Jekyll` 此时会在 `localhost` 的 `4000` 端口监听 `http` 请求，用浏览器访问`http://localhost:4000/index.html`，之前的页面出现了！\n\n然后你可以去 `Github` 上 fork 一个自己喜欢的 `Jekyll` 模板，然后将对应的项目拷贝到自己本地的目录下，然后执行上面的方法你就可以看到你的博客了。\n\n---\n\n##### 以上内容参考大神博文：\n* [一步步在GitHub上创建博客主页 全系列](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html)  by @pchou\n* [jekyll博客搭建之艰辛之路](http://www.dailichun.com/2016/10/29/jekyllbuild.html) by @Lichun Dai\n\n\n\n","tags":["Jeklly"],"categories":["自个儿折腾"]},{"title":"Github Pages 建立个人主页","url":"%2F2018%2F03%2F15%2FcreateBlogExperience%2F","content":"\n### 写在开始之前\n现在是第二次折腾博客了，我在想究竟该这么样开头呢，倒也没想过自己折腾的这个东西会有多少人开过，结束之后写在开始之前的东西，无非是多少年后回过头来告诉自己，做过，倒也不需要多认真。\n\n说起来可能得鄙视一下自己了，老早就想有个自己的网站，后来接触了前端这个想法也愈渐浓烈，去年差不多这个时候突然就开始折腾这个博客了，然后就开始查资料（PS：emme，菜鸟一个，英语也不好，幸好我大天朝有度娘，要善用搜索引擎），第一次搭建博客是用 Github pages & jeklly。然后折腾完博客就这么荒废了，然后就没有然后了...\n\n现在重新拾起这个半吊子博客开始记录，下面开始正题。\n### Github pages\n[GitHub Pages](https://pages.github.com) 本用于介绍托管在 GitHub 的项目，不过，每个 Github 用户都有 300M 免费稳定的空间，还可以绑定自己的域名，用来做搭建一个博客再好不过了，而且使用Git管理，方便且快捷。\n### 首先注册一个 Github 账户\n基于Github pages的博客，当然必须有GitHub的帐号，该帐号将用来创建项目，默认域名为 `github.com/UserName`，项目域名为 `github.com/UserName/ProjectName`。\n\n> 下面涉及到的一些命令凡是更用户名和项目名有关的一律会用这里的`UserName`和`ProjectName`代替，注意替换\n\n访问：[http://www.github.com](http://www.github.com/)，注册你的Github账户，注册需要填写`UserName`、`邮箱`（`UserName`和`邮箱`都可以登录），注册邮箱十分重要，GitHub上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。\n### 创建项目仓库\n在搭建博客之前，还需要用刚才注册的帐号创建一个项目，在Git中，项目被称为仓库(`Repository`)，仓库顾名思义，当然可以包含代码或者非代码。将来我们的网页或者模板实际上都是保存在这个仓库中的。\n\n![创建项目仓库](createBlogExperience/create-project.png)\n\n仓库创建好后，我们还需要一个管理工具去管理你的仓库。其实使用 git 命令行工具就完全足够了，图形化工具，都只不过是命令行的封装。就功能而言，他们能做的，命令行全部可以做到。`但命令行能做的，他们不一定可以做到`，命令行更加原生、本色，跨越平台。建议熟悉 git 命令行工具。\n\n但图形化工具也有自己的优点，就是直观。\n\n这里先省略使用Git客户端的安装和基本技巧，后面博客的搭建需要熟练的使用Git技巧，如果不熟悉，请移步到[Git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)，[Git使用教程图文详解](http://blog.csdn.net/dl425134845/article/details/50997357)，或者自行度娘。\n### 配置和使用 GitHub\n我们如何让本地 git 项目与远程的 GitHub 建立联系呢？用 SSH keys。\n\n###### 配置 SSH keys\n首先我们需要检查你电脑上现有的 ssh key：\n\n\n```bash\n$ cd ~/.ssh 检查本机的ssh密钥\n```\n\n> 如果提示：No such file or directory 说明你是第一次使用 git。\n\n###### 生成新的 SSH Key：\n\n```bash\n$ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>\n```\n> 注意 1: 此处的邮箱地址，你可以输入自己的邮箱地址；\n> 注意2: 此处的「-C」的是大写的「C」；\n\n然后系统会要你输入密码：\n\n```bash\nEnter passphrase (empty for no passphrase):<输入加密串>\nEnter same passphrase again:<再次输入加密串>\n```\n在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。\n\n注意：输入密码的时候没有 * 字样的，你直接输入就可以了。\n\n最后看到这样的界面，就成功设置 `ssh key` 了。\n\n###### 添加 SSH Key 到 GitHub：\n在本机设置 SSH Key 之后，需要添加到 GitHub上，以完成 SSH 链接的设置。\n\n* 打开本地 id_rsa.pub 文件。\n\n> 参考地址 C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub，此文件里面内容为刚才生成的密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\n\n* 登陆 GitHub 系统。点击右上角的 `Account Settings`—>`SSH Public keys` —> `add another public keys`。\n* 把你本地生成的密钥复制到 `key` 文本框中，点击 `add key` 就ok了。\n\n###### 测试\n可以输入下面的命令，看看设置是否成功，`git@GitHub.com` 的部分不要修改：\n\n```bash\n$ ssh -T git@GitHub.com\n```\n如果是下面的反馈：\n\n```bash\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? \n```\n不要紧张，输入 yes 就好，然后会看到：\n\n```bash\nHi cnfeat! You've successfully authenticated, but GitHub does not provide shell access. \n```\n###### 设置用户信息\n现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。\n\nGit 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。\n\n* Git Win 平台操作\n    - 开始菜单 Git Bash\n    - 鼠标右键打开 Git Bash\n* Git Mac 平台操作\n    - 安装 Git 之后可直接在 Terminal 操作\n\n```bash\n$ git config --global user.name \"UserName\"//用户名\n$ git config --global user.email  \"xxxx@gmail.com\"//填写自己的邮箱\n```\n###### SSH Key 配置成功\n本机已成功连接到 GitHub。\n\n###### 常见错误请参考\n* [GitHub Help - Generating SSH Keys](https://help.github.com/articles/connecting-to-github-with-ssh/)\n* [GitHub Help - Error Permission denied (publickey)](https://help.github.com/articles/error-permission-denied-publickey/)\n\n### 使用 GitHub Pages 建立个人主页\n在与 GitHub 建立好链接之后，就可以方便的使用它提供的Github Pages 服务，GitHub Pages 分两种，一种是你的 GitHub 用户名建立的 UserName.GitHub.io 这样的用户页（站），另一种是依附项目的 Pages。\n\n想建立个人博客是用的第一种，形如 [zhangRyze.GitHub.io](https://zhangryze.github.io/) 这样的可访问的站，每个用户名下面只能建立一个，而且仓库的名字必须是 `UserName/UserName.github.io`，这是特殊的命名约定。\n\n> 需要注意的个人主页的网站内容是在master分支下的。\n\n最后在 `UserName/UserName.github.io` 仓库根目录中需要 `index.html` 的文件，写入简单的html代码，你就可以通过`http://UserName.github.io`来访问到你的主页，可以看到你刚才写入的代码。\n\n> 想要搭建完整的博客系统需要用到 `jeklly` （用于生成静态网页的工具），咱们下回分解。\n\n---\n\n##### 以上内容参考大神博文：\n* [一步步在GitHub上创建博客主页 全系列](http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html)  by @pchou\n* [如何搭建一个独立博客——简明Github Pages与jekyll教程](http://www.cnfeat.com/blog/2014/05/11/how-to-build-a-blog/) by @cnfeat\n\n\n\n\n","tags":["Git"],"categories":["自个儿折腾"]}]